name: Build and Release APK

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'build-and-release'
        type: choice
        options:
          - 'build-and-release'
          - 'release-only'
      branch:
        description: 'Branch to build from (for build-and-release)'
        required: false
        default: 'main'
        type: string
      build_run_id:
        description: 'Build workflow run ID (for release-only)'
        required: false
        type: string
      artifact_name:
        description: 'Artifact name (for release-only)'
        required: false
        type: string
      release_name:
        description: 'Release name (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_notes:
        description: 'Release notes'
        required: false
        default: 'New release'

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'build-and-release'
    outputs:
      artifact-name: ${{ steps.artifact-info.outputs.name }}
      version: ${{ steps.version.outputs.version }}
      version-name: ${{ steps.version.outputs.version_name }}
      build-number: ${{ steps.version.outputs.build_number }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Setup FVM
        run: |
          flutter pub global activate fvm
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH
          
      - name: Install Flutter with FVM
        run: |
          fvm install
          fvm use --force
          
      - name: Get dependencies
        run: fvm flutter pub get
        
      - name: Run tests
        run: fvm flutter test
        continue-on-error: true
        
      - name: Get version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_name=$(echo $VERSION | cut -d'+' -f1)" >> $GITHUB_OUTPUT
          echo "build_number=$(echo $VERSION | cut -d'+' -f2)" >> $GITHUB_OUTPUT
          
      - name: Setup Android Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/release-key.jks
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        
      - name: Build Signed APK
        run: fvm flutter build apk --release
        env:
          ANDROID_KEYSTORE_PATH: android/app/release-key.jks
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        
      - name: Set artifact info
        id: artifact-info
        run: |
          ARTIFACT_NAME="playtivity-${{ steps.version.outputs.version_name }}-${{ github.event.inputs.branch }}-signed"
          echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        
      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-info.outputs.name }}
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && (needs.build.result == 'success' || github.event.inputs.action == 'release-only')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download APK Artifact (from current build)
        if: github.event.inputs.action == 'build-and-release'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ./apk-download
          
      - name: Download APK Artifact (from existing run)
        if: github.event.inputs.action == 'release-only'
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.artifact_name }}
          run-id: ${{ github.event.inputs.build_run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: ./apk-download
        
      - name: Get version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_name=$(echo $VERSION | cut -d'+' -f1)" >> $GITHUB_OUTPUT
          echo "build_number=$(echo $VERSION | cut -d'+' -f2)" >> $GITHUB_OUTPUT
            
      - name: Verify APK and Prepare for Release
        run: |
          cd ./apk-download
          
          # Check if APK exists
          if [ ! -f app-release.apk ]; then
            echo "❌ APK file not found in artifact"
            exit 1
          fi
          
          # Get APK size
          APK_SIZE=$(stat -f%z app-release.apk 2>/dev/null || stat -c%s app-release.apk 2>/dev/null || echo "unknown")
          echo "📦 APK Size: $APK_SIZE bytes"
          
          echo "✅ APK verified and ready for release"
          
      - name: Rename APK for Release
        run: |
          cd ./apk-download
          mv app-release.apk playtivity-${{ steps.version.outputs.version_name }}-release.apk
          ls -la playtivity-${{ steps.version.outputs.version_name }}-release.apk
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_name }}
          name: Playtivity ${{ github.event.inputs.release_name }}
          body: |
            ## Release Notes
            ${{ github.event.inputs.release_notes }}
            
            ## App Information
            - **Version:** ${{ steps.version.outputs.version_name }}
            - **Build Number:** ${{ steps.version.outputs.build_number }}
            - **Build Action:** ${{ github.event.inputs.action }}
            ${{ github.event.inputs.action == 'build-and-release' && format('- **Built from Branch:** {0}', github.event.inputs.branch) || format('- **Source Build Run:** https://github.com/{0}/actions/runs/{1}', github.repository, github.event.inputs.build_run_id) }}
            
            ## Download
            Download the APK file below and install it on your Android device.
            
            ### Installation Instructions
            1. Enable "Install from unknown sources" in your Android settings
            2. Download the APK file
            3. Open the downloaded file and follow the installation prompts
          files: ./apk-download/playtivity-${{ steps.version.outputs.version_name }}-release.apk
          draft: false
          prerelease: false 